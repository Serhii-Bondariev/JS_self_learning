// ЗНАЧЕНИЯ
// В JavaScript есть несколько типов значений(values):
// Фиксированные значения(ЛИТЕРАЛЫ), значения констант
// и значения переменных.

// ====================ЛИТЕРАЛЫ:
// 25                              литерал целого числа
// 23.5                            литерал дробного числа
// `JavaScript`                    литерал строки
// "JavaScript"                    литерал строки
// true                            литерал логического значения
// false                           литерал логического значения
// null                            литерал null
// undefined                       литерал undefined
// []                              литерал массива
// [1, 2, 3]                       литерал массива
// { }                             литерал объекта
// { name: "John" }                литерал объекта
//     ()                          литерал функции
// (ab|bc)                         литерал регулярного выражения
// function () { }                 литерал функции


// В языке JavaScript есть несколько типов значений(values):
// Фиксированные значения(ЛИТЕРАЛЫ), значения констант
// и значения переменных.
    
// В языках програмирования константы и переменние
// используются для хранения значений данных.

// const MAX_VALUE = 5;             константа;
// const MIN_VALUE = 0;             константа
// var section = 1;                 переменная
// let arr = [1, 2, 3];            переменная

// =====================ОПЕРАТОРЫ

// В JavaScript есть несколько операторов:
//     Унарные операторы
//     Бинарные операторы
//     Тернарный оператор
//     Jбозначаются в круглых скобках()
//     Они обозначают операцию, которую мы хотим выполнить

//     Примеры операторов:
//     console.log(1 + 2);
//     console.log(`1 + 2 = ${1 + 2}`);
//     console.log(`Учим`+`JS`);
//     console.log(name);
//     console.log(1 % 2);
//     console.log(1 ** 2);
    
    
//  =======================ВИРАЗИ
 
//  Вирази (expressions)- це комбінація значень,змінних та операторів які
//  або присвоюють змінній значення або повертають якесь значення без його присвоєння.

//  Приклади виразів:
 
// let num = 5;
// console.log(num); // Виведе 5
// num=6;
// console.log(num); // Виведе 6
// num=num+1;
// `Вчимо`+`JS`; ВИРАЗ БЕЗ ПРИСВОЄННЯ


//  =======================КЛЧОВІ СЛОВА
//  Ключові слова (keywords) - назви змінних та операторів, які не можуть бути використані в програмі.Ключові слова призначені для того щоб визначити яку дію JAvascript може виконувати.
//  Приклади ключових слов:
 
//  let num = `Вчимо JS`; вказує браузеру створити змінну num
//  console.log(num); // Виведе 6
//  num=6;
//  console.log(num); // Виведе 6
//  num=num+1;
//  console.log(num); // Виведе 7


// Ключові слова JavaScript:


// декілька прикладів зарезервованих імен в JavaScript та їхнє значення:

// var - Ключове слово для оголошення змінних. Це було основним способом оголошення змінних до введення let і const.

// let - Ключове слово для оголошення змінних з областю видимості в блоку.

// const - Ключове слово для оголошення константних змінних, значення яких не можна змінити після присвоєння.

// function - Ключове слово для оголошення функцій.

// if, else, switch - Ключові слова для умовних конструкцій.

// for, while, do - Ключові слова для циклічних конструкцій.
// class - Ключове слово для оголошення класів у JavaScript, введене у стандарті ES6.

// return - Ключове слово для повернення значення з функції.

// new - Ключове слово для створення нового екземпляра об'єкта з конструктора.

// додаткові приклади зарезервованих слів у JavaScript:

// await - Використовується для очікування результату виразу, який повертає об'єкт Promise в асинхронній функції.

// async - Вказує, що функція є асинхронною і повертає об'єкт Promise.

// catch - Використовується для обробки помилок при роботі з об'єктами Promise.

// throw - Використовується для створення нового об'єкту помилки.

// try - Початок блоку, в якому виконується перехоплення винятків.

// typeof - Оператор, який повертає рядок, що вказує на тип операнда.

// instanceof - Оператор, який перевіряє, чи об'єкт є екземпляром певного класу.

// export, import - Використовуються для роботи з модулями та експортом/імпортом коду між файлами.

// super - Використовується для виклику методів батьківського класу у внутрішньому класі.

// this - Вказує на поточний об'єкт, у якому виконується код.

// delete - Використовується для видалення властивостей об'єкта.

// default - Використовується для визначення значення за замовчуванням при імпорті модулів.

// yield - Використовується в генераторах для повернення значення та збереження стану.

// in - Оператор, який перевіряє, чи існує властивість в об'єкті.




 